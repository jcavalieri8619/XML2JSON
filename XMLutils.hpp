/* 
 * File:   XMLscan.hpp
 * Author: John Cavalieri 
 *
 * Created on September 17, 2013, 9:51 PM
 */

#ifndef XMLUTILS_HPP
#define	XMLUTILS_HPP

#include <string>
#include <map>
#include <vector>



/**
 * XMLutil namespace used to avoid clobbering global namespace
 * with names common to parsing and scanning
 * 
 * 
 */
namespace XMLutil
{


	typedef std::map< std::string, std::string > attributeType;

	/**
	 * identifies type of tags used in XML document
	 */
	enum TAGTYPE
	{
		CLOSE, OPEN, SELF_CLOSE
	};

	/**
	 * identifies states that a parser may encounter
	 * while scanning an XML document
	 */
	enum PARSER_STATE
	{
		DIRECTIVE, STARTING_FILE, END_COMMENT, START_COMMENT, IN_COMMENT,
		ONELINE_COMMENT, ELEMENT_OPENING_TAG, ELEMENT_CLOSING_TAG,
		COMPLETE_ELEMENT, CONTENT, ERROR
	};


	/**
	 * takes as input an XML line identified as containing
	 * a comment and extracts comment from XML syntax
	 * @param input: xml line containing some comment
	 * @param content: extracted content of comment
	 * @return: true because we assume well formed XML file
	 */
	bool get_commentContent( const std::string& input, std::string& content );


	/**
	 * takes XML line previously identified to contain a complete element
	 * and extracts content if any
	 * @param input: xml line containing complete element
	 * @param content: extraced content from XML line
	 * @return: false is input does not contain complete element; else true
	 */
	bool get_elementContent( const std::string& input, std::string& content );



	/**
	 * takes XML line that contains an opening tag and
	 * stores any attributes in a container
	 * @param input: XML line
	 * @param keyValue_pair: pointer to a vector that will hold attributes
	 * @return: true because we assume well formed XML file
	 */
	bool get_elementAttributes( const std::string & input,
					 attributeType* keyValue_pair );

	/**
	 * takes an XML line and scans for tokens that indicate
	 * a new parser state
	 * @param input: XML line
	 * @param output: if closing tag scanned, output will contain tag name.
	 * output could also contain opening tag name or directive contents
	 * @return: parser state generated by scanning input
	 */
	PARSER_STATE XMLscanner( const std::string& input, std::string& output );
}



#endif	/* XMLUTILS_HPP */

